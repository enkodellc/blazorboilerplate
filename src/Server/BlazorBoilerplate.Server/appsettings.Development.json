{
  "ConnectionStrings": {
    "PostgresConnection": "host=localhost;database=BlazorBoilerplate;user id=postgres;password=password123",
    // For Azure hosting with SQL DB: DefaultConnection string will look like: 
    "DefaultConnection": "Data Source=gatssql.database.windows.net,1433;Database=CLAIMCENTRE2;User ID = gatsadmin;Password=G@TSJun2016;Trusted_Connection=False;Encrypt=True;MultipleActiveResultSets=true;"
    // "DefaultConnection": "Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=BlazorBoilerplate;Trusted_Connection=True;MultipleActiveResultSets=True"
  },

  "HostingOnAzure": {
    "RunsOnAzure": true, // true for Azure hosting
    "RunningAsAppService": true, // true for Azure hosting
    "RunningAsDocker": false, // not implemented yet
    "AzureKeyVault": {
      "UsingKeyVault": true, // true for Azure hosting
      "UseManagedAppIdentity": true, // true for Azure hosting
      "AppKey": "", // not implemented yet: adding AppKey and AppSecret to the app. Then assigning permissions to these credentials inside the key vault
      "AppSecret": "",
      "KeyVaultUri": "https://claimcentre-app-kv.vault.azure.net/",
      "CertificateIdentifier": "https://claimcentre-app-kv.vault.azure.net/certificates/CCAUTH/ead70c77600b4258a511c202c47accd8",
      "CertificateName": "CCAUTH", // or a dev cert like AuthSample
      "StorageAccountBlobBaseUrl": "https://cs11003bffd8c15ed9a.blob.core.windows.net",
      "ContainerName": "claimcentre-app-keys",
      "KeysBlobName": "keys.xml"
    }
  },

  "ExternalAuthProviders": {
    "Google": {
      "Enabled": true,
      "ClientId": "xxx",
      "ClientSecret": "xxx"
    },
    "Facebook": {
      "Enabled": true,
      "AppId": "xxx",
      "AppSecret": "xxx"
    },
    "Twitter": {
      "Enabled": true,
      "ConsumerKey": "xxx",
      "ConsumerSecret": "xxx"
    },
    "Apple": {
      "Enabled": true,
      "ClientId": "xxx",
      "KeyId": "xxx",
      "TeamId": "xxx"
    },
    "Microsoft": {
      "Enabled": true,
      "ClientId": "xxx",
      "ClientSecret": "xxx"
    }
  },

  "BlazorBoilerplate": {
    "ApplicationUrl": "https://claimcentre.apps.gats.asia", // If Azure hosting: https://blazor-boilerplate.azurewebsites.net or custom domain hostname
    "RequireConfirmedEmail": false,
    "API": {
      "Logging": {
        "Enabled": true,
        "IgnorePaths": [ "/api/account", "/api/admin", "/api/apilog" ]
      },
      "Doc": {
        "Enabled": true
      }
    },
    "UsePostgresServer": false,
    "IS4ApplicationUrl": "https://claimcentre.apps.gats.asia", // If Azure hosting: https://blazor-boilerplate.azurewebsites.net or custom domain hostname 
    "UseLocalCertStore": false, // false for Azure hosting
    "CertificateThumbprint": "C7E3FAF501D5085FAC7AD9429996C3ACA8DD1F1F" // If Azure hosting: X.509 SHA-1 Thumbprint (in hex) from Azure Key Vault in Azure Portal.
  },

  "Modules": {
    "BlazorBoilerplate.GoogleAnalytics": {
      "TrackingId": "UA-XXXXXXXX-X"
    }
  },

  "Serilog": {
    "Using": [ "Serilog.Sinks.Console", "Serilog.Sinks.File", "Serilog.Sinks.MSSQLServer" ],
    "Enrich": [ "FromLogContext", "WithMachineName", "WithProcessId", "WithThreadId" ],
    "MinimumLevel": {
      "Default": "Warning", // If Azure hosting, can be useful to set to 'Debug' during testing
      "Override": {
        "Microsoft": "Warning",
        "System": "Warning"
      }
    },
    "WriteTo": [
      {
        // If you're not using mssql as a backend db either remove this section or just make sure that the target connection string is not blank
        // Does not throw exception if connection string is invalid, only if it doesn't exist
        "Name": "MSSqlServer", // see https://github.com/serilog/serilog-sinks-mssqlserver/blob/dev/README.md for additional config options
        "Args": {
          "connectionString": "DefaultConnection",
          "tableName": "Logs", // Table Defined in BlazorBoilerplate.Shared/DataModels/Logs.cs
          "autoCreateSqlTable": false,
          "restrictedToMinimumLevel": "Information"
        }
      },
      {
        "Name": "File",
        "Args": {
          "path": "Logs\\log-.log",
          "rollingInterval": "Day",
          "retainedFileCountLimit": 5
        }
      },
      {
        "Name": "File",
        "Args": {
          "RestrictedToMinimumLevel": "Warning",
          "path": "Logs\\log-warning-.log",
          "rollingInterval": "Day",
          "retainedFileCountLimit": 5
        }
      }
    ]
  },
  "AllowedHosts": "*"
}
