@page "/fetchdata"
@using BlazorBoilerplate.Shared
@using Microsoft.AspNetCore.Components
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (!loading && !string.IsNullOrEmpty(error))
{
    <div>Error: @error</div>
}

@if (loading)
{
    <LoadingBackground ShowLogoBox="true">
        <label>Loading Weather Data</label>
    </LoadingBackground>
}

@if (loaded)
{
    <MatTable Items="@forecasts" Class="mat-elevation-z5">
        <MatTableHeader>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Date.ToShortDateString()</td>
            <td>@context.TemperatureC</td>
            <td>@context.TemperatureF</td>
            <td>@context.Summary</td>
        </MatTableRow>
    </MatTable>

    <hr/>
    <h1>Todo</h1>

    <p>This component demonstrates fetching data from a third party API.</p>
    <MatTable Class="mat-elevation-z5" Items="@todos" LoadInitialData="true" Striped="true" RequestApiOnlyOnce="true" ApiUrl="https://jsonplaceholder.typicode.com/todos" FilterByColumnName="Title" DebounceMilliseconds="150">
        <MatTableHeader>
            <th>Id</th>
            <th>Completed</th>
            <th style="min-width: 200px;">Todo</th>

        </MatTableHeader>
        <MatTableRow>
            <td>@String.Format("{0:d}", @context.Id)</td>
            <td>
                <MatCheckbox Checked="@context.Completed" class="filled-in chk-col-blue" Disabled="true"></MatCheckbox>
            </td>
            <td>@context.Title</td>
        </MatTableRow>
    </MatTable>
}

@functions {

    Todo[] todos;

    WeatherForecast[] forecasts;

    bool loading = false;
    bool loaded = false;
    string error = string.Empty;

    protected override async Task OnInitAsync()
    {
        try
        {
            loading = true;
            loaded = false;
            error = string.Empty;

            forecasts = await Http.GetJsonAsync<WeatherForecast[]>("api/SampleData/WeatherForecasts");

            loaded = true;
            loading = false;
        }
        catch (Exception ex)
        {
            error = ex.Message;
            loaded = false;
            Console.WriteLine(ex);
    // throw;
        }
        finally
        {
            loading = false;
        }
    }

    public class Todo
    {
        public int UserId { get; set; }
        public int Id { get; set; }
        public string Title { get; set; }
        public bool Completed { get; set; }

        public Todo()
        {
        }
    }

}