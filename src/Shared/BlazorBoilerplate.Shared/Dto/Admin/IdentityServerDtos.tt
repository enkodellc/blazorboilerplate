<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ include file="$(SolutionDir)\Utils\T4\TemplateFilemanager.CS.ttinclude" #>
<#@ output extension=".txt" #>
<#
var fileManager = TemplateFileManager.Create(this);
fileManager.IsAutoIndentEnabled = true;
fileManager.CanOverwriteExistingFile = true;
foreach (var entity in new string[] { "Client", "IdentityResource", "ApiResource" })
	{
    fileManager.StartNewFile($"{entity}Dto.cs");
#>
//Autogenerated from IdentityServerDtos.tt
using IdentityServer4.Models;
using ObjectCloner.Extensions;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text.RegularExpressions;

namespace BlazorBoilerplate.Shared.Dto.Admin
{
    public partial class <#=entity#>Dto : <#=entity#>, IMementoDto
    {
        private object state;

        public void SaveState()
        {
            state = this.DeepClone();
        }

        public void RestoreState()
        {
            if (state != null)
                foreach (PropertyInfo property in GetType().GetProperties().Where(p => p.CanWrite))
                    property.SetValue(this, property.GetValue(state, null), null);
        }
        public void ClearState()
        {
            state = null;
        }
        <#
        var iEnumarableStringProperties = fileManager.GetTypeFromAssembly("IdentityServer4.Storage", $"IdentityServer4.Models.{entity}").GetProperties().Where(p => typeof(IEnumerable<string>).IsAssignableFrom(p.PropertyType));
        foreach (PropertyInfo property in iEnumarableStringProperties)
        {#>
        [Newtonsoft.Json.JsonIgnore]
        [System.Text.Json.Serialization.JsonIgnore]
        public string <#=property.Name#>Text
        {
            get => JoinLines(<#=property.Name#>);
            set => <#=property.Name#> = SplitLines(value);
        }
        <#
        }

        if(iEnumarableStringProperties.Count()>0)
        {#>
        private ICollection<string> SplitLines(string value)
        {
            return Regex.Split(value, @"\s+|;|,").Where(i => i != string.Empty).ToArray();
        }
        private string JoinLines(IEnumerable<string> value)
        {
            return string.Join('\n', value);
        }
        <#}
        #>
    }
}
<#
  }
   fileManager.Process();
#>
