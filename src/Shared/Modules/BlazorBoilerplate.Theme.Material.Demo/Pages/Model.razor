@page "/datasets/{DatasetId}/training/{SessionId}/model/{ModelId}"
@inject IStringLocalizer<Global> L
@using System
@using System.IO;
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IJSRuntime JSRuntime
@inject BlazorBoilerplate.Shared.Services.SessionState SessionState

<MatTabGroup>
    <MatTab Label="Overview">
       <div class="mat-layout-grid mat-layout-grid-align-left" style="max-width: 800px;">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell">
                    <p>AutoML:</p>
                    <p>ML library:</p>
                    <p>Model:</p>
                    <p>Score:</p>
                    <p>Prediction time[ms]:</p>
                    <p>Runtime AutoML[s]:</p>
                </div>
                <div class="mat-layout-grid-cell">
                    <p>@ModelId</p>
                    <p>@SessionState.session.AutoMls[selectedAutoMLId].Library</p>
                    <p>@SessionState.session.AutoMls[selectedAutoMLId].Model</p>
                    <p>@string.Format("{0:f3}", @SessionState.session.AutoMls[selectedAutoMLId].TestScore)</p>
                    <p>@string.Format("{0:f3}", @SessionState.session.AutoMls[selectedAutoMLId].Predictiontime)</p>
                    <p>@SessionState.session.AutoMls[selectedAutoMLId].Runtime</p>
                </div>
            </div>
            <MatButton Outlined="true" Icon="@MatIconNames.Cloud_download" OnClick="@DownloadModel">Download model pipeline</MatButton>
        </div>
    </MatTab>
    <MatTab Label="Configuration">
        <Configuration Session="@SessionState.session"></Configuration>
    </MatTab>
    <MatTab Label="Details">
        <div style="padding: 5px; margin-top: 25px;">
            <MatList Style=" min-height: 2rem; max-height: 60rem; overflow-y: auto;">
                @foreach (var item in SessionState.session.AutoMls[selectedAutoMLId].Messages)
                {
                    <MatListItem>
                        @item
                    </MatListItem>
                }
            </MatList>
        </div>
    </MatTab>
    <MatTab Label="Predict">
        <div>
            <div class="mat-layout-grid mat-layout-grid-align-left" style="max-width: 1000px;">
                <div class="mat-layout-grid-inner">
                    <div class="mat-layout-grid-cell">
                        <MatFileUpload OnChange="@FilesReady" Label="Choose File"></MatFileUpload>
                    </div>
                    <div class="mat-layout-grid-cell">
                        @if(predicted){
                            <p>File: @predictFileName</p>
                            @if(automlResponse.Score!=0.0){
                                <p>Score: @string.Format("{0:f3}", @automlResponse.Score)</p>
                            }
                            <p>Prediction time[s]: @string.Format("{0:f3}", @automlResponse.Predictiontime)</p>
                        }
                    </div>
                </div>
                <div class="mat-layout-grid-cell" style="margin-top: 20px;">
                    <MatButton Icon="@MatIconNames.Cloud_download" Outlined="true" @bind-Disabled="@disableButton" OnClick="@DownloadPredictions">Download result csv</MatButton>
                </div>
            </div>
        </div>
    </MatTab>
</MatTabGroup>

@code {
    [Parameter]
    public string? DatasetId { get; set; }
    [Parameter]
    public string? SessionId { get; set; }
    [Parameter]
    public string? ModelId { get; set; }

    private int selectedAutoMLId = 0;
    private bool predicted = false;
    private bool disableButton = true;
    private string predictFileName = "";
    private TestAutoMLResponseDto automlResponse;

    protected override void OnInitialized(){
        foreach (AutoMLStatusDto automl in SessionState.session.AutoMls){
            if(automl.Name == ModelId){
                break;
            }
            selectedAutoMLId += 1;
        }
    }

    private async void DownloadModel()
    {
        try
        {
            ApiResponseDto apiResponse = await apiClient.GetModel(new GetAutoMlModelRequestDto { SessionId = SessionId, AutoMl = ModelId });

            if (apiResponse.IsSuccessStatusCode)
            {
                GetAutoMlModelResponseDto file = Newtonsoft.Json.JsonConvert.DeserializeObject<GetAutoMlModelResponseDto>(apiResponse.Result.ToString());
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
                await JSRuntime.InvokeVoidAsync(
                    "downloadFromByteArray",
                     new
                     {
                         ByteArray = file.Content,
                         FileName = file.Name,
                         ContentType = "application/octet-stream"
                     });
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    private async void DownloadPredictions(){
        try{
            byte[] predictionBytes = automlResponse.Predictions.SelectMany(s => System.Text.Encoding.UTF8.GetBytes(s + Environment.NewLine)).ToArray();

            await JSRuntime.InvokeVoidAsync(
                "downloadFromByteArray",
                 new
                 {
                     ByteArray = predictionBytes,
                     FileName = predictFileName,
                     ContentType = "application/octet-stream"
                 });
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    private async Task FilesReady(IMatFileUploadEntry[] files)
    {
        string FileContent = "";
        try
        {
            foreach (var file in files)
            {
                //Only one file can always be read
                using (var stream = new MemoryStream())
                {
                    await file.WriteToStreamAsync(stream);
                    stream.Seek(0, SeekOrigin.Begin);
                    using (var reader = new StreamReader(stream))
                    {
                        var content = await reader.ReadToEndAsync();
                        predictFileName = file.Name;
                        FileContent = content;
                    }
                }
            }

        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }

        //Test AutoML
        try
        {
            ApiResponseDto apiResponse = await apiClient.TestAutoML(new TestAutoMLRequestDto { TestData = FileContent, SessionId = SessionId, AutoMlName = ModelId });
            if (apiResponse.IsSuccessStatusCode)
            {
                TestAutoMLResponseDto response = Newtonsoft.Json.JsonConvert.DeserializeObject<TestAutoMLResponseDto>(apiResponse.Result.ToString());
                automlResponse = response;
                predicted=true;
                disableButton=false;
                StateHasChanged();
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}