@page "/datasets/{DatasetId}/training/{SessionId}/model/{ModelId}"
@inject IStringLocalizer<Global> L
@using System
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IJSRuntime JSRuntime
@inject BlazorBoilerplate.Shared.Services.SessionState SessionState


<MatTabGroup>
    <MatTab Label="Overview">
       <div class="mat-layout-grid mat-layout-grid-align-left" style="max-width: 800px;">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell">
                    <p>AutoML:</p>
                    <p>ML library:</p>
                    <p>Model:</p>
                    <p>Score:</p>
                    <p>Prediction time[ms]:</p>
                    <p>Runtime AutoML[s]:</p>
                </div>
                <div class="mat-layout-grid-cell">
                    <p>@ModelId</p>
                    <p>@SessionState.session.AutoMls[selectedAutoMLId].Library</p>
                    <p>@SessionState.session.AutoMls[selectedAutoMLId].Model</p>
                    <p>@SessionState.session.AutoMls[selectedAutoMLId].TestScore</p>
                    <p>@SessionState.session.AutoMls[selectedAutoMLId].Predictiontime</p>
                    <p>@SessionState.session.AutoMls[selectedAutoMLId].Runtime</p>
                </div>
            </div>
            <MatButton Outlined="true" Icon="@MatIconNames.Cloud_download" OnClick="@DownloadModel">Download model pipeline</MatButton>
        </div>
    </MatTab>
    <MatTab Label="Configuration">
        <Configuration Session="@SessionState.session"></Configuration>
    </MatTab>
    <MatTab Label="Details">
        <div style="padding: 5px; margin-top: 25px;">
            <MatList Style=" min-height: 2rem; max-height: 60rem; overflow-y: auto;">
                @foreach (var item in SessionState.session.AutoMls[selectedAutoMLId].Messages)
                {
                    <MatListItem>
                        @item
                    </MatListItem>
                }
            </MatList>
        </div>
    </MatTab>
    <MatTab Label="Predict">
    </MatTab>
</MatTabGroup>

@code {
    [Parameter]
    public string? DatasetId { get; set; }
    [Parameter]
    public string? SessionId { get; set; }
    [Parameter]
    public string? ModelId { get; set; }

    private int selectedAutoMLId = 0;

    protected override void OnInitialized(){
        foreach (AutoMLStatusDto automl in SessionState.session.AutoMls){
            if(automl.Name == ModelId){
                break;
            }
            selectedAutoMLId += 1;
        }
    }

    private async void DownloadModel()
    {
        try
        {
            ApiResponseDto apiResponse = apiResponse = await apiClient.GetModel(new GetAutoMlModelRequestDto { SessionId = SessionId, AutoMl = ModelId });

            if (apiResponse.IsSuccessStatusCode)
            {
                GetAutoMlModelRespomseDto file = Newtonsoft.Json.JsonConvert.DeserializeObject<GetAutoMlModelRespomseDto>(apiResponse.Result.ToString());
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
                await JSRuntime.InvokeVoidAsync(
                    "downloadFromByteArray",
                     new
                     {
                         ByteArray = file.Content,
                         FileName = file.Name,
                         ContentType = "application/octet-stream"
                     });
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}