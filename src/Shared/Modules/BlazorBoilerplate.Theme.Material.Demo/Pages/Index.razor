@page "/"
@inject IStringLocalizer<Global> L
@using System
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject NavigationManager NavManager
@attribute [Authorize]

<Wizard Id="Test" @bind-ActiveStepIx="_wizardActiveStep" @bind-IsNextStepApproved="_isNextStepApproved" OnSubmit="@OnWizzardCompleted">
    <WizardStep Name="1">
        <div class="row">
            @if (isLoading)
            {
                <p>Uploading...</p>
            }
            else
            {
                <SelectDataset @bind-SelectedDataset="_automlRequest" CheckForNextStepCallback="@CheckIfNextStepIsApproved"></SelectDataset>
            }
        </div>
    </WizardStep>
    <WizardStep Name="2">
        <div class="row">
            <DisplayTabularDataset AutoMLRequest="@_automlRequest" CheckForNextStepCallback="@CheckIfNextStepIsApproved"></DisplayTabularDataset>
        </div>
    </WizardStep>
    <WizardStep Name="3">
        <div class="row" style="display: block;">
            <TaskConfiguration @bind-AutoMLRequest="_automlRequest" CheckForNextStepCallback="@CheckIfNextStepIsApproved"></TaskConfiguration>
        </div>
    </WizardStep>
</Wizard>

<MatDialog @bind-IsOpen="_isAutoMlStartedOpen">
    <MatDialogTitle>AutoML started</MatDialogTitle>
    <MatDialogContent>

    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { NavManager.NavigateTo("/sessions"); })">OK</MatButton>
    </MatDialogActions>
</MatDialog>

@code{
    private bool _isNextStepApproved = false;
    private bool _isAutoMlStartedOpen = false;
    private int _wizardActiveStep = 0;
    private bool isLoading;
    private StartAutoMLRequestDto _automlRequest;
    private StartAutoMLResponseDto _autoMltask;

    protected override void OnInitialized()
    {
        _automlRequest = new StartAutoMLRequestDto();
    }

    private void CheckIfNextStepIsApproved()
    {
        switch (_wizardActiveStep)
        {
            case 0:
                if (_automlRequest.DatasetName == null)
                {
                    _isNextStepApproved = false;
                }
                else
                {
                    _isNextStepApproved = true;
                }
                break;
            case 1:
                //Since we have no requirements here we can move
                _isNextStepApproved = true;
                break;
            case 2:
                switch (_automlRequest.DatasetType)
                {
                    case "TABULAR":
                        _isNextStepApproved = IsTabularConfigurationCompleted();
                        break;
                    default:
                        break;
                }
                break;
        }
    }
    private bool IsTabularConfigurationCompleted()
    {
        if (string.IsNullOrEmpty(_automlRequest.Task))
        {
            return false;
        }
        // TODO refactor
        if (string.IsNullOrEmpty(((AutoMLTabularDataConfiguration)_automlRequest.Configuration).Target.Target))
        {
            return false;
        }
        return true;
    }

    private async Task OnWizzardCompleted()
    {
        try
        {
            ApiResponseDto apiResponse = await apiClient.StartAutoML(_automlRequest);

            if (apiResponse.IsSuccessStatusCode)
            {
                _autoMltask = Newtonsoft.Json.JsonConvert.DeserializeObject<StartAutoMLResponseDto>(apiResponse.Result.ToString());
                _isAutoMlStartedOpen = true;
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}

