@inject IStringLocalizer<Global> L
@using System
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier

<h3>Configuration</h3>

<MatAccordion>
    <MatExpansionPanel>
        <MatExpansionPanelSummary>
            <MatExpansionPanelHeader>Required</MatExpansionPanelHeader>
        </MatExpansionPanelSummary>
        <p>
            <MatTextField @bind-Value="@InputValue" Label="Standard" Outlined="true"></MatTextField>
        </p>
        <MatExpansionPanelDetails>
            <p>Select the Machine Learning task AutoML should perform:</p>
            <MatChipSet Filter="true" SelectedChipChanged="@OnChipChanged">
                @if (_compatibleAutoMl != null && _compatibleAutoMl.AutoMlSolutions.Count != 0)
                {
                    @foreach (var item in _compatibleAutoMl.AutoMlSolutions)
                    {
                        <MatChip Label="@item"></MatChip>
                    }
                }
            </MatChipSet>
            <MatChipSet Filter="true" SelectedChipChanged="@OnChipChanged">
                @if (_supportedMlLibraries != null && _supportedMlLibraries.MlLibraries.Count != 0)
                {
                    @foreach (var item in _supportedMlLibraries.MlLibraries)
                    {
                        <MatChip Label="@item"></MatChip>
                    }
                }
            </MatChipSet>

            @if (_columnNames != null)
            {
                <MatSelectItem Items="@_columnNames.ColumnNames" TValue="string" ValueChanged="@OnTargetChanged"></MatSelectItem>
            }
        </MatExpansionPanelDetails>
    </MatExpansionPanel>
    <MatExpansionPanel>
        <MatExpansionPanelSummary>
            <MatExpansionPanelHeader>Optional</MatExpansionPanelHeader>
            <MatExpansionPanelSubHeader>For experts</MatExpansionPanelSubHeader>
        </MatExpansionPanelSummary>
        <MatExpansionPanelDetails>
            <MatChipSet Filter="true" SelectedChipChanged="@OnChipChanged">
                @if (_compatibleAutoMl != null)
                {
                    @foreach (var item in _compatibleAutoMl.AutoMlSolutions)
                    {
                        <MatChip Label="@item"></MatChip>
                    }
                }
            </MatChipSet>
        </MatExpansionPanelDetails>
    </MatExpansionPanel>
</MatAccordion>


<h4>Optional</h4>
@code {
    public string InputValue
    {
        get => _inputValue;
        set 
        {
            _inputValue = value;
            this.StateHasChanged();
            LoadData();
        }
    }

    private string _inputValue ="default";
}
@code {
    //private GetTasksResponseDto _tasks;
    private GetCompatibleAutoMlSolutionsResponseDto _compatibleAutoMl;
    private GetTabularDatasetColumnNamesResponseDto _columnNames;
    private GetSupportedMlLibrariesResponseDto _supportedMlLibraries;
    [Parameter]
    public StartAutoMLRequestDto AutoMLRequest { get; set; }

    [Parameter]
    public EventCallback<StartAutoMLRequestDto> AutoMLRequestChanged { get; set; }
    /// <summary>
    /// Trigger to start examination for IsNextStepApproved in Parent
    /// </summary>
    [Parameter]
    public EventCallback CheckForNextStepCallback { get; set; }

    protected override async void OnInitialized()
    {
        await LoadData();
        AutoMLRequest.Configuration = new AutoMLTabularDataConfiguration();
    }

    private async void OnChipChanged(MatChip newChip)
    {
        //AutoMLRequest.Configuration = newChip.Label;
        UpdateParent();
    }

    private async void OnTargetChanged(string value)
    {
        ((AutoMLTabularDataConfiguration)AutoMLRequest.Configuration).Target = value;
        UpdateParent();
    }

    private async void UpdateParent()
    {
        await AutoMLRequestChanged.InvokeAsync(AutoMLRequest);
        await CheckForNextStepCallback.InvokeAsync();
    }

    private async Task LoadData()
    {
        try
        {

            GetTabularDatasetColumnNamesRequestDto columnRequest = new GetTabularDatasetColumnNamesRequestDto { DatasetName = AutoMLRequest.DatasetName };
            ApiResponseDto apiResponse = await apiClient.GetTabularDatasetColumnNames(columnRequest);
            if (apiResponse.IsSuccessStatusCode)
            {
                _columnNames = Newtonsoft.Json.JsonConvert.DeserializeObject<GetTabularDatasetColumnNamesResponseDto>(apiResponse.Result.ToString());
                StateHasChanged();
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
            Dictionary<string, string> dictionary = new Dictionary<string, string>();
            // binary later change to tabular .
            dictionary.Add("task", "tabular classification");
            dictionary.Add("dummy", "regression");
            GetCompatibleAutoMlSolutionsRequestDto compatibleAutoMlRequest = new GetCompatibleAutoMlSolutionsRequestDto { Configuration = dictionary };
            apiResponse = await apiClient.GetCompatibleAutoMlSolutions(compatibleAutoMlRequest);

            if (apiResponse.IsSuccessStatusCode)
            {
                _compatibleAutoMl = Newtonsoft.Json.JsonConvert.DeserializeObject<GetCompatibleAutoMlSolutionsResponseDto>(apiResponse.Result.ToString());
                StateHasChanged();
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }

            GetSupportedMlLibrariesRequestDto supportedMlLibrariesRequest = new GetSupportedMlLibrariesRequestDto { Task = _inputValue };
            apiResponse = await apiClient.GetSupportedMlLibraries(supportedMlLibrariesRequest);

            if (apiResponse.IsSuccessStatusCode)
            {
                _supportedMlLibraries = Newtonsoft.Json.JsonConvert.DeserializeObject<GetSupportedMlLibrariesResponseDto>(apiResponse.Result.ToString());
                StateHasChanged();
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}
