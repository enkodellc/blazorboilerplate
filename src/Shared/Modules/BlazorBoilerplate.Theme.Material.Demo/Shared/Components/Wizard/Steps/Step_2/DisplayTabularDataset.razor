@inject IStringLocalizer<Global> L
@using System
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier

@if (_datasets != null)
{
    <table class="table-responsive table-striped">
        <thead>
            <tr>
                @foreach (var item in _datasets)
                {
                    <th>@item.Name</th>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                @foreach (var col in _datasets)
                {
                    <td>
                        <MatSelect TValue="int" Value="@((int) col.Type)">
                            @foreach (int val in Enum.GetValues(typeof(ColumnType)))
                            {
                                <MatOption TValue="int" Value="@((int) val)">@Enum.GetName(typeof(ColumnType), val)</MatOption>
                            }
                        </MatSelect>
                    </td>
                }
            </tr>
            @for (int i = 0; i < _datasets[0].FirstEntries.Count; i++)
            {
                <tr>
                    @foreach (var column in _datasets)
                    {
                        <td>@column.FirstEntries[i]</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}







@code {
    [Parameter]
    public StartAutoMLRequestDto AutoMLRequest { get; set; }
    private List<GetDatasetResponseDto> _datasets;
    /// <summary>
    /// Trigger to start examination for IsNextStepApproved in Parent
    /// </summary>
    [Parameter]
    public EventCallback CheckForNextStepCallback { get; set; }

    protected override async void OnInitialized()
    {
        try
        {
            ApiResponseDto apiResponse = apiResponse = await apiClient.GetDataset(new GetDatasetRequestDto { Name = AutoMLRequest.DatasetName });

            if (apiResponse.IsSuccessStatusCode)
            {
                _datasets = Newtonsoft.Json.JsonConvert.DeserializeObject<List<GetDatasetResponseDto>>(apiResponse.Result.ToString());
                StateHasChanged();
                await CheckForNextStepCallback.InvokeAsync(); //We can just move to the next step if required
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}
