
@inject IViewNotifier viewNotifier
@inject IStringLocalizer<Global> L

<CascadingValue Value="this">

    <h1>Start new Run</h1>
    <div style="display:flex; flex-direction:column">
        <div style="display:flex; flex-direction:row; justify-content:space-between">
            <div>
                @if (ActiveStepIx == 0)
                {
                    <h2>Step @(ActiveStepIx + 1): Select data</h2>
                }
                else if (ActiveStepIx == 1)
                {
                    <h2>Step @(ActiveStepIx + 1): View and edit data</h2>
                }
                else if (ActiveStepIx == 2)
                {
                    <h2>Step @(ActiveStepIx + 1): Configuration</h2>
                }
            </div>
            <div>
                <button class="btn btn-primary btn-lg" type="button"
                        disabled="@(ActiveStepIx == 0)" @onclick="GoBack">
                    Previous
                </button>
                @if (IsLastStep == true)
                {
                    <button class="btn btn-primary btn-lg" type="submit" @onclick="OnSubmit">
                        Submit
                    </button>
                }
                else
                {
                    <button class="btn btn-primary btn-lg" type="button" @onclick="GoNext">
                        Next
                    </button>
                }
            </div>
        </div>
    </div>

    <div id="@Id">
        <div id="container-fluid">
            @ChildContent
        </div>
    </div>
</CascadingValue>

@code {
    /// <summary>
    /// List of <see cref="WizardStep"/> added to the Wizard
    /// </summary>
    protected internal List<WizardStep> Steps = new List<WizardStep>();

    /// <summary>
    /// The control Id
    /// </summary>
    [Parameter]
    public string Id { get; set; }

    /// <summary>
    /// The ChildContent container for <see cref="WizardStep"/>
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// The Active <see cref="WizardStep"/>
    /// </summary>
    [Parameter]
    public WizardStep ActiveStep { get; set; }

    /// <summary>
    /// The Index number of the <see cref="ActiveStep"/>
    /// </summary>
    [Parameter]
    public int ActiveStepIx { get; set; }
    [Parameter]
    public EventCallback<int> ActiveStepIxChanged { get; set; }

    /// <summary>
    /// Determines whether the Wizard is in the last step
    /// </summary>

    public bool IsLastStep { get; set; }

    /// <summary>
    /// Determins if next step is approved
    /// </summary>
    [Parameter]
    public bool IsNextStepApproved { get; set; }
    [Parameter]
    public EventCallback<bool> IsNextStepApprovedChanged { get; set; }

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    /// <summary>
    /// Sets the <see cref="ActiveStep"/> to the previous Index
    /// </summary>

    protected internal async void GoBack()
    {
        if (ActiveStepIx > 0)
            SetActive(Steps[ActiveStepIx - 1]);
        await ActiveStepIxChanged.InvokeAsync(ActiveStepIx);
    }

    /// <summary>
    /// Sets the <see cref="ActiveStep"/> to the next Index
    /// </summary>
    protected async void GoNext()
    {
        if (IsNextStepApproved == true)
        {
            if (ActiveStepIx < Steps.Count - 1)
                SetActive(Steps[(Steps.IndexOf(ActiveStep) + 1)]);
            IsNextStepApproved = false;
            await IsNextStepApprovedChanged.InvokeAsync(IsNextStepApproved);
        }
        else
        {
            switch (ActiveStepIx)
            {
                case 0:
                    viewNotifier.Show("No dataset selected", ViewNotifierType.Error, L["Operation Failed"]);
                    break;
                case 1:
                    //No posible error, since we always move to next step
                    break;
                case 2:
                    viewNotifier.Show("Required parameter missing", ViewNotifierType.Error, L["Operation Failed"]);
                    break;
            }
        }
        await ActiveStepIxChanged.InvokeAsync(ActiveStepIx);
    }

    /// <summary>
    /// Populates the <see cref="ActiveStep"/> the Sets the passed in <see cref="WizardStep"/> instance as the
    /// </summary>
    /// <param name="step">The WizardStep</param>

    protected internal void SetActive(WizardStep step)
    {
        ActiveStep = step ?? throw new ArgumentNullException(nameof(step));

        ActiveStepIx = StepsIndex(step);
        if (ActiveStepIx == Steps.Count - 1)
            IsLastStep = true;
        else
            IsLastStep = false;
    }

    /// <summary>
    /// Retrieves the index of the current <see cref="WizardStep"/> in the Step List
    /// </summary>
    /// <param name="step">The WizardStep</param>
    /// <returns></returns>
    public int StepsIndex(WizardStep step) => StepsIndexInternal(step);
    protected int StepsIndexInternal(WizardStep step)
    {
        if (step == null)
            throw new ArgumentNullException(nameof(step));

        return Steps.IndexOf(step);
    }
    /// <summary>
    /// Adds a <see cref="WizardStep"/> to the WizardSteps list
    /// </summary>
    /// <param name="step"></param>
    protected internal void AddStep(WizardStep step)
    {
        Steps.Add(step);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            SetActive(Steps[0]);
            StateHasChanged();
        }
    }
}
