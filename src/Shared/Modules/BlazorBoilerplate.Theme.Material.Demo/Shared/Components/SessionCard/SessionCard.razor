@inject IStringLocalizer<Global> L
@using System
@using System.Timers
@using System.IO;
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IJSRuntime JSRuntime
@inject BlazorBoilerplate.Shared.Services.SessionState SessionState
@implements IDisposable

@if (_session != null)
{
    <MatCard Style="max-width: 500px;">
        <div class="demo-mat-card-content">
            <MatHeadline6 Style="margin: 0px;">
                Session @SessionId
            </MatHeadline6>
            @if (_session.Status == 1)
            {
                <MatProgressBar Indeterminate="true"></MatProgressBar>
            }
                @foreach (var automl in _session.AutoMls)
                {
                <MatCardContent Style="display:flex;flex-direction: row;justify-content: space-between;padding: 12px;" Label="@automl.Name" @onclick="(() => ChangeState(automl.Name))">
                    <span>@automl.Name</span>
                    @switch (automl.Status)
                    {
                        case 1:
                            <span>running</span>
                            break;
                        case 2:
                            <span>finished</span>
                            break;
                        case 3:
                            <span>ERROR WHILE RUNNING</span>
                            break;
                        default:
                            break;
                    }
                </MatCardContent>
                }
        </div>
        <MatDivider></MatDivider>
        <div class="demo-mat-card-content">
            <p Style="margin-bottom: 0; padding-left: 6px; padding-top: 6px;">Dataset: @_session.Dataset</p>
            <p Style="margin-bottom: 0; padding-left: 6px;">Task: @_session.Task</p>
            <p Style="margin-bottom: 0; padding-left: 6px; padding-bottom: 6px;">Target: @_session.Configuration.Target.Target</p>
        </div>
    </MatCard>
}


@code {
    private Timer _timer;
    private GetSessionResponseDto _session = null;

    [Parameter]
    public string SessionId { get; set; }

    protected async void ChangeState(string automlName)
    {
        DisposeTimer();
        SessionState.id = SessionId;
        SessionState.selectedAutoML = automlName;
        SessionState.session = _session;
        SessionState.ChangeState();
    }

    protected override void OnInitialized()
    {
        LoadSession(null, null);
        _timer = new Timer()
        {
            AutoReset = true,
            Enabled = true,
            Interval = 5000
        };
        _timer.Elapsed += LoadSession;
        SessionState.OnChange += SwitchSelectedEventHandler;
        Console.WriteLine("Card Timer created");
    }

    private void SwitchSelectedEventHandler()
    {
        if(!SessionState.selected & SessionState.session !=null){
            if(SessionState.session.Status==1 & _timer == null){
                _timer = new Timer()
                {
                    AutoReset = true,
                    Enabled = true,
                    Interval = 5000
                };
                _timer.Elapsed += LoadSession;
                Console.WriteLine("Card Timer created");
            }
        }
    }

    private async void LoadSession(object sender, ElapsedEventArgs e)
    {
        await InvokeAsync(async () =>
        {
            try
            {
                ApiResponseDto apiResponse = apiResponse = await apiClient.GetSession(new GetSessionRequestDto { SessionId = SessionId });

                if (apiResponse.IsSuccessStatusCode)
                {
                    _session = Newtonsoft.Json.JsonConvert.DeserializeObject<GetSessionResponseDto>(apiResponse.Result.ToString());
                    if (_session.Status != 1)
                    {
                        DisposeTimer();
                    }

                    StateHasChanged();
                }
                else
                {
                    viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
                }
            }
            catch (Exception ex)
            {
                viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
                _timer.Elapsed -= LoadSession;
            }
        });
    }

    public void DisposeTimer()
    {
        if(_timer!=null){
            _timer.Elapsed -= LoadSession;
            _timer?.Dispose();
            _timer = null;
            Console.WriteLine("Card Timer destroyed");
        }
    }

    public void Dispose(){
        DisposeTimer();
    }
}
