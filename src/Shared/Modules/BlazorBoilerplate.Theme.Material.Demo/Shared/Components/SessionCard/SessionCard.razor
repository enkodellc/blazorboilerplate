@inject IStringLocalizer<Global> L
@using System
@using System.Timers
@using System.IO;
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IJSRuntime JSRuntime
@implements IDisposable

@if (_session != null)
{
    <MatCard Style="max-width: 500px;">
        <div class="demo-mat-card-content">
            <MatHeadline6 Style="margin: 0px;">
                Session @SessionId
            </MatHeadline6>
            @if (_session.Status == 1)
            {
                <MatProgressBar Indeterminate="true"></MatProgressBar>
            }
            <MatTabGroup @bind-ActiveIndex="_autoMlIndex">
                @foreach (var automl in _session.AutoMls)
                {
                <MatTab Label="@automl.Name">
                    @switch (automl.Status)
                    {
                        case 1:
                        case 2:
                            <div style="padding: 5px; border: 1px solid white;">
                                <MatList Style=" min-height: 2rem; max-height: 30rem; overflow-y: auto;">
                                    @foreach (var item in automl.Messages)
                                    {
                                        <MatListItem>
                                            @item
                                        </MatListItem>
                                    }
                                </MatList>
                            </div>
                            break;
                        case 3:
                            <p>ERROR WHILE RUNNING</p>
                            break;
                        default:
                            break;
                    }
                </MatTab>
                }
            </MatTabGroup>
        </div>
        <MatCardActionIcons>
            <MatIconButton Icon="@MatIconNames.Cloud_download" OnClick="@DownloadOutputAsync"></MatIconButton>
        </MatCardActionIcons>
    </MatCard>
}


@code {
    public IEnumerable<string> items2 = Enumerable.Range(0, 200).Select(i => i.ToString()).ToArray();
    private Timer _timer;
    private GetSessionResponseDto _session = null;
    private int _autoMlIndex = 0;

    [Parameter]
    public string SessionId { get; set; }


    protected override void OnInitialized()
    {
        LoadSession(null, null);
        _timer = new Timer()
        {
            AutoReset = true,
            Enabled = true,
            Interval = 5000
        };
        _timer.Elapsed += LoadSession;
    }

    private async void LoadSession(object sender, ElapsedEventArgs e)
    {
        await InvokeAsync(async () =>
        {
            try
            {
                ApiResponseDto apiResponse = apiResponse = await apiClient.GetSession(new GetSessionRequestDto { SessionId = SessionId });

                if (apiResponse.IsSuccessStatusCode)
                {
                    _session = Newtonsoft.Json.JsonConvert.DeserializeObject<GetSessionResponseDto>(apiResponse.Result.ToString());
                    if (_session.Status != 1)
                    {
                        _timer.Elapsed -= LoadSession;
                    }

                    StateHasChanged();
                }
                else
                {
                    viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
                }
            }
            catch (Exception ex)
            {
                viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
                _timer.Elapsed -= LoadSession;
            }
        });
    }

    public void Dispose()
    {
        _timer.Elapsed -= LoadSession;
        _timer?.Dispose();
    }

    private async void DownloadOutputAsync()
    {
        try
        {
            if (_session.AutoMls[_autoMlIndex].Status != 2)
            {
                viewNotifier.Show("Download unavailable", ViewNotifierType.Error, L["Operation Failed"]);
                return;
            }
            ApiResponseDto apiResponse = apiResponse = await apiClient.GetModel(new GetAutoMlModelRequestDto { SessionId = SessionId, AutoMl = _session.AutoMls[_autoMlIndex].Name });

            if (apiResponse.IsSuccessStatusCode)
            {
                GetAutoMlModelRespomseDto file = Newtonsoft.Json.JsonConvert.DeserializeObject<GetAutoMlModelRespomseDto>(apiResponse.Result.ToString());
                viewNotifier.Show(apiResponse.Message, ViewNotifierType.Success, L["Operation Successful"]);
                await JSRuntime.InvokeVoidAsync(
                    "downloadFromByteArray",
                     new
                     {
                         ByteArray = file.Content,
                         FileName = file.Name,
                         ContentType = "application/octet-stream"
                     });
            }
            else
            {
                viewNotifier.Show(apiResponse.Message + " : " + apiResponse.StatusCode, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}
