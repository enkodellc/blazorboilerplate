@inherits RolesPage
@page "/admin/roles"
@attribute [Authorize(Policies.IsAdmin)]
@layout AdminLayout

<TopSection>
    <Breadcrumbs>
        <Breadcrumb Link="/admin" Title=@L["BreadCrumbadmin"] />
        <Breadcrumb Title=@L["BreadCrumbadminroles"] />
    </Breadcrumbs>
</TopSection>

<h1>@L["Roles"]</h1>

@if (roles == null)
{
    <LoadingBackground ShowLogoBox="true">
        <label>@L["Loading"]</label>
    </LoadingBackground>
}
else
{
    <MudTable Items="@roles" Virtualize="true" Hover="@hover" RowsPerPage="@rows" Dense="@dense" Striped="@striped" FixedHeader="@fixhdr" Height="@(fixhdr?"1080px":"")" Filter="new Func<RoleDto,bool>(FilterFunc)">
        <ToolBarContent>
            <MudIconButton @onclick="@(() => OpenUpsertRoleDialog())" Label=@L["New Role"] Icon="@Icons.Filled.Add" Color="Color.Success" Size="Size.Small" />            
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Actions</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<RoleDto, object>(x=>x.Name)">@L["Name"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<RoleDto, object>(x=>x.FormattedPermissions)">@L["Permissions"]</MudTableSortLabel></MudTh>
        </HeaderContent>
        
        <RowTemplate Context="RoleRow">
            <MudTd>
                <MudIconButton Icon="@Icons.Filled.Edit" OnClick="@(() => OpenUpsertRoleDialog(@RoleRow.Name))" Disabled="@(RoleRow.Name == BlazorBoilerplate.Constants.DefaultRoleNames.Administrator)"></MudIconButton>
                <MudIconButton Icon="@Icons.Filled.Delete" OnClick="@(() => OpenDeleteDialog(@RoleRow.Name))" Disabled="@(RoleRow.Name == BlazorBoilerplate.Constants.DefaultRoleNames.Administrator)"></MudIconButton>
            </MudTd>
            <MudTd DataLabel="Name">@RoleRow.Name</MudTd>
            <MudTd DataLabel="Permission">@RoleRow.FormattedPermissions
                <MudChipSet>
                    @foreach (var permission in @RoleRow.Permissions)
                        {
                        <MudChip Text="@permission"></MudChip>
                        }
                </MudChipSet>
            </MudTd>
            
           
        </RowTemplate>
    </MudTable>
}

<MudDialog @bind-IsVisible="@isUpsertRoleDialogOpen">
    <TitleContent>
        @labelUpsertDialogTitle
    </TitleContent>
    <DialogContent>
        <fieldset>
            <div class="form-group">
                <MudTextField @bind-Value="@currentRoleName" Disabled="@isCurrentRoleReadOnly" Label="Role Name" Icon="add" Adornment="Adornment.End" FullWidth="true" Required="true"></MudTextField>
            </div>
        </fieldset>
        <MudTable Items="@permissionsSelections" Class="mat-elevation-z5, mdc-table-allow" ShowPaging="false" PageSize="@int.MaxValue">
            <HeaderContent>
                <th>@L["Permissions"]</th>
                <th>@L["Allow"]</th>
            </HeaderContent>
            <RowTemplate>
                <td>@context.DisplayValue</td>
                <td><MudCheckBox @bind-Checked="@context.Selected"></MudCheckBox></td>
            </RowTemplate>
        </MudTable>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(e => { isUpsertRoleDialogOpen = false; })">@L["Cancel"]</MudButton>
        <MudButton OnClick="@UpsertRole">@labelUpsertDialogOkButton</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="@isDeleteRoleDialogOpen" Style="z-index:100">
    <TitleContent><MudIcon Icon="@Icons.Filled.Warning"></MudIcon> @L["Confirm Delete"]</TitleContent>
    <DialogContent>
        @L["Are you sure you want to delete {0}?", currentRoleName]
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(e => { isDeleteRoleDialogOpen = false; })">@L["Cancel"]</MudButton>
        <MudButton OnClick="@DeleteRoleAsync">@L["Delete"]</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool dense = true;
    private bool hover = true;
    private bool _hide = true;
    private bool striped = true;
    private bool fixhdr = true;
    public bool _loading { get; set; }
    private int rows = 100;
    string snackMsg = "";
    private string searchString = "";

    private bool FilterFunc(RoleDto element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name != null && element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.FormattedPermissions != null && element.FormattedPermissions.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void MoreRows(MouseEventArgs e)
    {
        if (rows == 16) { rows = 26; } else { rows = 16; }
    }
}
