@page "/account/profile"
@attribute [Authorize]

@inject HttpClient Http
@inject AuthenticationStateProvider authStateProvider
@inject IStringLocalizer<Global> L
@inject ISnackbar Snackbar



<h1>@L["User Profile"]</h1>
<p>User profile management.</p>

@if (userViewModel == null)
{
    <LoadingBackground ShowLogoBox="true"></LoadingBackground>
}
else
{
    <div class="form-group">
        <MudButton ButtonType="ButtonType.Submit" form="mainForm">@L["Update"]</MudButton>
        @if (userViewModel.HasPassword)
        {
            <MudButton IconClass="rotate_right" OnClick="@(() => OpenUpdatePasswordDialog())">@L["Change Password"]</MudButton>
        }
        @if (userViewModel.HasAuthenticator)
        {
            <MudButton IconClass="rotate_right" OnClick="@(() => DisableAuthenticator())">@L["ResetAuthenticator"]</MudButton>
        }
    </div>
    <EditForm id="mainForm" Model="@userViewModel" OnValidSubmit="@UpdateUser">
        <FluentValidationValidator />
        <ValidationSummary />
        <fieldset>
            <div class="form-group">
                <MudTextField @bind-Value="@userViewModel.UserName" Text=@L["UserName"] Icon="person" IconTrailing="true" FullWidth="true" Required="true" ReadOnly="true"></MudTextField>
            </div>
            <div class="form-group">
                <MudTextField @bind-Value="@userViewModel.Email" Text="Email" Icon="mail_outline" IconTrailing="true" FullWidth="true" Required="true"></MudTextField>
            </div>
            <div class="form-group">
                <MudTextField @bind-Value="@userViewModel.FirstName" Text=@L["FirstName"] FullWidth="true"></MudTextField>
            </div>
            <div class="form-group">
                <MudTextField @bind-Value="@userViewModel.LastName" Text=@L["LastName"] FullWidth="true"></MudTextField>
            </div>
            <div class="form-group">
                <strong>@L["Roles"]</strong><br />
                <MudChipSet>
                    @foreach (var role in userViewModel.Roles)
                    {
                        <MudChip Text="@role"></MudChip>
                    }
                </MudChipSet>
            </div>
        </fieldset>
    </EditForm>
    @if (userViewModel.TwoFactorEnabled)
    {
        <div class="form-group">
            <MudSwitch @bind-Checked="@TwoFactorEnabled" Label=@L["TwoFactorAuthentication"] />
        </div>
        @if (userViewModel.BrowserRemembered)
        {
            <div class="form-group">
                <MudSwitch @bind-Checked="@BrowserRemembered" Label=@L["BrowserRemembered"] />
            </div>
        }
        if (userViewModel.RecoveryCodes != null)
        {
            <div class="form-group">
                <MudChipSet>
                    @foreach (var rcode in userViewModel.RecoveryCodes)
                    {
                        <MudChip Text="@rcode.ToString()"></MudChip>
                    }
                </MudChipSet>
            </div>
        }
        else
        {
            <div class="form-group">
                <span>@L["RecoveryCodesLeft"]</span> @userViewModel.CountRecoveryCodes
            </div>
        }
    }
    else
    {
        <h3>@L["TwoFactorAuthentication"]</h3>
        <p>
            Download a two-factor authenticator app like Microsoft Authenticator or Google Authenticator.
        </p>
        <p>Scan the QR Code or enter this key <kbd>@userViewModel.SharedKey</kbd> into your two factor authenticator app. Spaces and casing do not matter.</p>
        <img src="@($"https://chart.googleapis.com/chart?chs=200x200&chld=M|0&cht=qr&chl={userViewModel.AuthenticatorUri}")" />
        <p>
            Once you have scanned the QR code or input the key above, your two factor authentication app will provide you
            with a unique code. Enter the code in the confirmation box below.
        </p>
        <MudTextField @bind-Value="@authenticatorVerificationCodeViewModel.Code" Label=@L["Code"] FullWidth="true"></MudTextField>
        <MudButton OnClick="@EnableAuthenticator">@L["VerifyCode"]</MudButton>
    }
    <MudDialog IsVisible="@updatePasswordDialogOpen">
        <TitleContent>
            <MudText Typo="Typo.h6">Password Update for @userViewModel.UserName</MudText>
        </TitleContent>
        <DialogContent>
            <EditForm Model="@updatePasswordViewModel" OnValidSubmit="@UpdatePassword">
                <FluentValidationValidator />
                <ValidationSummary />
                <fieldset>
                    <div class="form-group">
                        <MudTextField @bind-Value="@updatePasswordViewModel.CurrentPassword" Text=@L["CurrentPassword"] Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MudTextField>
                    </div>
                    <div class="form-group">
                        <MudTextField @bind-Value="@updatePasswordViewModel.NewPassword" Text=@L["NewPassword"] Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MudTextField>
                    </div>
                    <div class="form-group">
                        <MudTextField @bind-Value="@updatePasswordViewModel.NewPasswordConfirm" Text=@L["Password Confirmation"] Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MudTextField>
                    </div>
                </fieldset>
            </EditForm>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="@(e => { updatePasswordDialogOpen = false; })">@L["Cancel"]</MudButton>
            <MudButton Color="Color.Secondary" OnClick="@UpdatePassword">@L["Update Password"]</MudButton>
        </DialogActions>
    </MudDialog>
}


@code {
    UserViewModel userViewModel;
    bool updatePasswordDialogOpen = false;
    UpdatePasswordViewModel updatePasswordViewModel { get; set; } = new UpdatePasswordViewModel();
    AuthenticatorVerificationCodeViewModel authenticatorVerificationCodeViewModel { get; set; } = new AuthenticatorVerificationCodeViewModel();
    IdentityAuthenticationStateProvider identityAuthenticationStateProvider;

    public bool BrowserRemembered
    {
        get { return userViewModel.BrowserRemembered; }
        set
        {
            if (userViewModel.BrowserRemembered != value)
                ForgetTwoFactorClient().ContinueWith(t =>
                {
                    if (t.IsFaulted)

                        Snackbar.Add(t.Exception.Message, Severity.Error, config =>
                        {
                            config.ShowCloseIcon = true;
                            config.SnackbarVariant = Variant.Filled;
                            config.ActionColor = Color.Error;
                        });
                    //matToaster.Add(t.Exception.Message, MatToastType.Danger, L["Operation Failed"]);
                });
        }
    }

    public bool TwoFactorEnabled
    {
        get { return userViewModel.TwoFactorEnabled; }
        set 
        {
            if (userViewModel.TwoFactorEnabled != value)
                EnableDisable2fa().ContinueWith(t =>
                {
                    if (t.IsFaulted)
                        Snackbar.Add(t.Exception.Message, Severity.Error, config =>
                        {
                            config.ShowCloseIcon = true;
                            config.SnackbarVariant = Variant.Filled;
                            config.ActionColor = Color.Error;
                        });
                });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        identityAuthenticationStateProvider = (IdentityAuthenticationStateProvider)authStateProvider;
        userViewModel = await identityAuthenticationStateProvider.GetUserViewModel();
    }

    void OpenUpdatePasswordDialog()
    {
        updatePasswordViewModel = new UpdatePasswordViewModel();
        updatePasswordDialogOpen = true;
    }

    async Task UpdatePassword()
    {
        if (updatePasswordViewModel.NewPassword != updatePasswordViewModel.NewPasswordConfirm)
        {
            Snackbar.Add("PasswordConfirmationFailed.", Severity.Error, config =>
            {
                config.ShowCloseIcon = true;
                config.SnackbarVariant = Variant.Filled;
                config.ActionColor = Color.Error;
            });
        }
        else
        {
            try
            {
                var apiResponse = await identityAuthenticationStateProvider.UpdatePassword(updatePasswordViewModel);
                if (apiResponse.IsSuccessStatusCode)
                {
                    Snackbar.Add("Your Password has been successfully updated.", Severity.Success, config =>
                    {
                        config.ShowCloseIcon = true;
                        config.SnackbarVariant = Variant.Filled;
                        config.ActionColor = Color.Success;

                    });
                }
                else
                {
                    Snackbar.Add(apiResponse.Message, Severity.Error, config =>
                    {
                        config.ShowCloseIcon = true;
                        config.SnackbarVariant = Variant.Filled;
                        config.ActionColor = Color.Error;

                    });
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error, config =>
                {
                    config.ShowCloseIcon = true;
                    config.SnackbarVariant = Variant.Filled;
                    config.ActionColor = Color.Error;
                });
            }
            updatePasswordDialogOpen = false;
        }
    }

    async Task UpdateUser()
    {
        try
        {
            var apiResponse = await identityAuthenticationStateProvider.UpdateUser(userViewModel);
            if (apiResponse.IsSuccessStatusCode)
            {
                Snackbar.Add(L["Operation Successful"], Severity.Success, config =>
                {
                    config.ShowCloseIcon = true;
                    config.SnackbarVariant = Variant.Filled;
                    config.ActionColor = Color.Success;

                });
            }
            else
            {
                Snackbar.Add(L["Operation Failed"], Severity.Error, config =>
                {
                    config.ShowCloseIcon = true;
                    config.SnackbarVariant = Variant.Filled;
                    config.ActionColor = Color.Error;

                });
            }
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error, config =>
            {
                config.ShowCloseIcon = true;
                config.SnackbarVariant = Variant.Filled;
                config.ActionColor = Color.Error;
            });
        }
    }

    async Task EnableAuthenticator()
    {
        var apiResponse = await identityAuthenticationStateProvider.EnableAuthenticator(authenticatorVerificationCodeViewModel);

        if (apiResponse.IsSuccessStatusCode)
        {
            Snackbar.Add(L["Operation Successful"], Severity.Success, config =>
            {
                config.ShowCloseIcon = true;
                config.SnackbarVariant = Variant.Filled;
                config.ActionColor = Color.Success;
            });
            userViewModel = apiResponse.Result;
            StateHasChanged();
        }
        else
        {
            Snackbar.Add(L["Operation Failed"], Severity.Error, config =>
            {
                config.ShowCloseIcon = true;
                config.SnackbarVariant = Variant.Filled;
                config.ActionColor = Color.Error;
            });
        }
    }

    async Task DisableAuthenticator()
    {
        try
        {
            var apiResponse = await identityAuthenticationStateProvider.DisableAuthenticator();
            if (apiResponse.IsSuccessStatusCode)
            {
                Snackbar.Add(L["Operation Successful"], Severity.Success, config =>
                {
                    config.ShowCloseIcon = true;
                    config.SnackbarVariant = Variant.Filled;
                    config.ActionColor = Color.Success;
                });
                userViewModel = apiResponse.Result;
                authenticatorVerificationCodeViewModel = new AuthenticatorVerificationCodeViewModel();
                StateHasChanged();
            }
            else
            {
                Snackbar.Add(L["Operation Failed"], Severity.Error, config =>
                {
                    config.ShowCloseIcon = true;
                    config.SnackbarVariant = Variant.Filled;
                    config.ActionColor = Color.Error;
                });
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(L["Operation Failed"], Severity.Error, config =>
            {
                config.ShowCloseIcon = true;
                config.SnackbarVariant = Variant.Filled;
                config.ActionColor = Color.Error;
            });
        }
    }

    async Task ForgetTwoFactorClient()
    {
        if (userViewModel.BrowserRemembered)
        {
            var apiResponse = await identityAuthenticationStateProvider.ForgetTwoFactorClient();
            if (apiResponse.IsSuccessStatusCode)
            {

                Snackbar.Add(L["Operation Successful"], Severity.Success, config =>
                {
                    config.ShowCloseIcon = true;
                    config.SnackbarVariant = Variant.Filled;
                    config.ActionColor = Color.Success;
                });
                userViewModel = apiResponse.Result;
                StateHasChanged();
            }
            else
            {
                Snackbar.Add(apiResponse.Message, Severity.Error, config =>
                {
                    config.ShowCloseIcon = true;
                    config.SnackbarVariant = Variant.Filled;
                    config.ActionColor = Color.Error;
                });
            }
        }
    }

    async Task EnableDisable2fa()
    {
        var apiResponse = userViewModel.TwoFactorEnabled ? await identityAuthenticationStateProvider.Disable2fa() : await identityAuthenticationStateProvider.Enable2fa();
        if (apiResponse.IsSuccessStatusCode)
        {
            Snackbar.Add(L["Operation Success"], Severity.Success, config =>
            {
                config.ShowCloseIcon = true;
                config.SnackbarVariant = Variant.Filled;
                config.ActionColor = Color.Success;
            });
            userViewModel = apiResponse.Result;
            StateHasChanged();
        }
        else
        {
            Snackbar.Add(L["Operation Failed"], Severity.Error, config =>
            {
                config.ShowCloseIcon = true;
                config.SnackbarVariant = Variant.Filled;
                config.ActionColor = Color.Error;
            });
        }
    }
}

@*@code {
        UserViewModel userViewModel;
        bool updatePasswordDialogOpen = false;
        UpdatePasswordViewModel updatePasswordViewModel { get; set; } = new UpdatePasswordViewModel();
        AuthenticatorVerificationCodeViewModel authenticatorVerificationCodeViewModel { get; set; } = new AuthenticatorVerificationCodeViewModel();
        IdentityAuthenticationStateProvider identityAuthenticationStateProvider;

        public bool BrowserRemembered
        {
            get { return userViewModel.BrowserRemembered; }
            set
            {
               // if (userViewModel.BrowserRemembered != value)
               //     ForgetTwoFactorClient().ContinueWith(t =>
               //     {
               //         if (t.IsFaulted)
               //             Snackbar.Add(t.Exception.Message, Severity.Error, config => { config.ShowCloseIcon = true;
               //                                                                           config.SnackbarVariant = Variant.Filled;
               //                                                                           config.ActionColor = Color.Error;
               //                                                                       });
               //           // viewNotifier.Show(t.Exception.Message, ViewNotifierType.Error, L["Operation Failed"]);
               //     });
            }
        }

        public bool TwoFactorEnabled
        {
            get { return userViewModel.TwoFactorEnabled; }
            set
            {
                if (userViewModel.TwoFactorEnabled != value)
                    EnableDisable2fa().ContinueWith(t =>
                    {
                        if (t.IsFaulted)
                            Snackbar.Add(t.Exception.Message, Severity.Error, config =>
                            {
                                config.ShowCloseIcon = true;
                                config.SnackbarVariant = Variant.Filled;
                                config.ActionColor = Color.Error;
                            });
                        //  viewNotifier.Show(t.Exception.Message, ViewNotifierType.Error, L["Operation Failed"]);
                    });
            }
        }


        protected override async Task OnInitializedAsync()
        {
            identityAuthenticationStateProvider = (IdentityAuthenticationStateProvider)authStateProvider;

             userViewModel = await identityAuthenticationStateProvider.GetUserViewModel();
        }

        void OpenUpdatePasswordDialog()
        {
            updatePasswordViewModel = new UpdatePasswordViewModel();
            updatePasswordDialogOpen = true;
        }

        async Task UpdatePassword()
        {
            if (updatePasswordViewModel.NewPassword != updatePasswordViewModel.NewPasswordConfirm)
            {
                //  viewNotifier.Show(L["PasswordConfirmationFailed"], ViewNotifierType.Warning);
                Snackbar.Add("PasswordConfirmationFailed.", Severity.Error, config =>
                {
                    config.ShowCloseIcon = true;
                    config.SnackbarVariant = Variant.Filled;
                    config.ActionColor = Color.Error;
                });
            }
            else
            {
                try
                {
                    var apiResponse = await identityAuthenticationStateProvider.UpdatePassword(updatePasswordViewModel);

                    if (apiResponse.IsSuccessStatusCode)
                        Snackbar.Add("Your Password has been successfully updated.", Severity.Success, config =>
                        {
                            config.ShowCloseIcon = true;
                            config.SnackbarVariant = Variant.Filled;
                            config.ActionColor = Color.Success;
                        });
                    else
                        Snackbar.Add(apiResponse.Message, Severity.Error, config =>
                        {
                            config.ShowCloseIcon = true;
                            config.SnackbarVariant = Variant.Filled;
                            config.ActionColor = Color.Error;

                        });
                    //viewNotifier.Show(apiResponse.Message, ViewNotifierType.Error, L["UpdatePasswordFailed"]);
                }
                catch (Exception ex)
                {

                    Snackbar.Add(ex.Message, Severity.Error, config => { config.ShowCloseIcon = true; config.SnackbarVariant = Variant.Filled; config.ActionColor = Color.Error; });
                    // viewNotifier.Show(ex.Message, ViewNotifierType.Error, L["UpdatePasswordFailed"]);
                }

                updatePasswordDialogOpen = false;
            }
        }

        async Task UpdateUser()
        {
            try
            {
                var apiResponse = await identityAuthenticationStateProvider.UpdateUser(userViewModel);

                if (apiResponse.IsSuccessStatusCode)
                    Snackbar.Add(L["Operation Successful"], Severity.Success, config =>
                    {
                        config.ShowCloseIcon = true;
                        config.SnackbarVariant = Variant.Filled;
                        config.ActionColor = Color.Error;
                    });
                //viewNotifier.Show(L["Operation Successful"], ViewNotifierType.Success);
                else
                    Snackbar.Add(L["Operation Failed"], Severity.Success, config =>
                    {
                        config.ShowCloseIcon = true;
                        config.SnackbarVariant = Variant.Filled;
                        config.ActionColor = Color.Error;
                    });
                //viewNotifier.Show(apiResponse.Message, ViewNotifierType.Error, L["Operation Failed"]);
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error, config =>
                {
                    config.ShowCloseIcon = true;
                    config.SnackbarVariant = Variant.Filled;
                    config.ActionColor = Color.Error;
                });
                // viewNotifier.Show(ex.Message, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }

        async Task EnableAuthenticator()
        {
            var apiResponse = await identityAuthenticationStateProvider.EnableAuthenticator(authenticatorVerificationCodeViewModel);

            if (apiResponse.IsSuccessStatusCode)
            {
                Snackbar.Add(L["Operation Successful"], Severity.Success, config =>
                {
                    config.ShowCloseIcon = true;
                    config.SnackbarVariant = Variant.Filled;
                    config.ActionColor = Color.Success;
                });
                //viewNotifier.Show(L["Operation Successful"], ViewNotifierType.Success);
                userViewModel = apiResponse.Result;
                StateHasChanged();
            }
            else
                Snackbar.Add(L["Operation Failed"], Severity.Success, config =>
                {
                    config.ShowCloseIcon = true;
                    config.SnackbarVariant = Variant.Filled;
                    config.ActionColor = Color.Success;
                });
            //viewNotifier.Show(apiResponse.Message, ViewNotifierType.Error, L["Operation Failed"]);

        }

        async Task DisableAuthenticator()
        {
            try
            {
                var apiResponse = await identityAuthenticationStateProvider.DisableAuthenticator();

                if (apiResponse.IsSuccessStatusCode)
                {
                    Snackbar.Add(L["Operation Successful"], Severity.Success, config =>
                    {
                        config.ShowCloseIcon = true;
                        config.SnackbarVariant = Variant.Filled;
                        config.ActionColor = Color.Success;
                    });
                    //viewNotifier.Show(L["Operation Successful"], ViewNotifierType.Success);
                    userViewModel = apiResponse.Result;
                    authenticatorVerificationCodeViewModel = new AuthenticatorVerificationCodeViewModel();
                    StateHasChanged();
                }
                else
                    Snackbar.Add(L["Operation Failed"], Severity.Error, config =>
                    {
                        config.ShowCloseIcon = true;
                        config.SnackbarVariant = Variant.Filled;
                        config.ActionColor = Color.Error;
                    });
            }
            //viewNotifier.Show(apiResponse.Message, ViewNotifierType.Error, L["Operation Failed"]);
            catch (Exception ex)
            {
               a

                //viewNotifier.Show(ex.Message, ViewNotifierType.Error, L["Operation Failed"]);
            }

        }



        async Task EnableDisable2fa()
        {
            var apiResponse = userViewModel.TwoFactorEnabled ? await identityAuthenticationStateProvider.Disable2fa() : await identityAuthenticationStateProvider.Enable2fa();

            if (apiResponse.IsSuccessStatusCode)
            {
                Snackbar.Add(L["Operation Cancelled"], Severity.Error, config =>
                {
                    config.ShowCloseIcon = true;
                    config.SnackbarVariant = Variant.Filled;
                    config.ActionColor = Color.Error;
                });
                //viewNotifier.Show(L["Operation Successful"], ViewNotifierType.Success);
                userViewModel = apiResponse.Result;
                StateHasChanged();
            }
            else
            {
                Snackbar.Add(L["Operation Failed"], Severity.Error, config =>
                {
                    config.ShowCloseIcon = true;
                    config.SnackbarVariant = Variant.Filled;
                    config.ActionColor = Color.Error;
                });
                //viewNotifier.Show(apiResponse.Message, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }

    }*@
