@page "/dashboard"
@attribute [Authorize]
@inject AppState appState

<h1>Dashboard</h1>

<p>
    Interested in studying? <br />
    Check out <a href="https://uok.ac.ir" target="_blank">University of Kurdistan</a> for further info.<br />
</p>
<hr />
<h2>Like!</h2>

<MatFAB icon="exposure_plus_1" @onclick="@IncrementCount"></MatFAB>

<MatButton OnClick="@Click">Text @ButtonState</MatButton>
<MatButton Raised="true">Raised</MatButton>
<MatButton Unelevated="true">Unelevated</MatButton>
<MatButton Outlined="true">Outlined</MatButton>
<MatButton Dense="true">Dense</MatButton>

<p>
    Current Page Count: <strong>@currentCount</strong>
    <br />
    Your Likes Number: <strong>@if (@profileCurrentCount != -1)@profileCurrentCount</strong>
</p>

<p>
    This "User Profile" for persistant user data built into our database.
    Currently we store this but in the future will track the users last page and more <br />
</p>

@code {
    int currentCount = 0;
    int profileCurrentCount = -1;

    protected override async Task OnInitializedAsync()
    {
        profileCurrentCount = await appState.GetUserProfileCount();
    }

    public async Task IncrementCount()
    {
        currentCount++;
        profileCurrentCount++;
        await appState.UpdateUserProfileCount(profileCurrentCount);
    }

    string ButtonState = "";

    void Click(MouseEventArgs e)
    {
        //ButtonState = "Clicked";
        ButtonState = profileCurrentCount.ToString();

    }
}

<MatFileUpload OnChange="@FilesReady"></MatFileUpload>

@foreach (var f in list)
{
    <div>@f</div>
}

@code
        {
    List<string> list = new List<string>();

    void FilesReady(IMatFileUploadEntry[] files)
    {
        foreach (var file in files)
        {
            list.Add($"Name: {file.Name} - Size: {file.Size}");
        }
    }
}

<MatFileUpload OnChange="@FilesReadyForContent"></MatFileUpload>
<textarea style="width: 100%; max-height: 300px; height: 300px;">@fileContent</textarea>

@code
        {

    string fileContent;

    async Task FilesReadyForContent(IMatFileUploadEntry[] files)
    {
        try
        {
            var file = files.FirstOrDefault();
            if (file == null)
            {
                return;
            }

            using (var stream = new System.IO.MemoryStream())

            {
                var sw = System.Diagnostics.Stopwatch.StartNew();
                await file.WriteToStreamAsync(stream);
                sw.Stop();
                if (stream.Length > 1024 * 1024)
                {
                    fileContent = "";
                    fileContent += $"Name:\t{file.Name}\r\n";
                    fileContent += $"Type:\t{file.Type}\r\n";
                    fileContent += $"LastModified:\t{file.LastModified}\r\n";
                    fileContent += $"Size:\t{file.Size}\r\n";
                    fileContent += $"Time:\t{sw.Elapsed}\r\n";
                    fileContent += $"Speed:\t{(stream.Length / sw.Elapsed.TotalSeconds):N0}  b/s\r\n";
                }
                else
                {
                    stream.Seek(0, System.IO.SeekOrigin.Begin);
                    using (var reader = new System.IO.StreamReader(stream))
                    {
                        fileContent = await reader.ReadToEndAsync();
                    }
                }
            }
        }

        catch (Exception e)
        {
            fileContent = $"Error:\r\n{e.Message}\r\n{e.StackTrace}";
        }
        finally
        {
            await InvokeAsync(async () => { this.StateHasChanged(); });
        }
    }
}